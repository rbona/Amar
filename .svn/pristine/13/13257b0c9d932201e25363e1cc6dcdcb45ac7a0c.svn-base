/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.amar.controle.template;

import br.com.amar.modelo.template.ModeloEntidade;
import br.com.amar.modelo.template.ModeloRepositorio;
import br.com.amar.utils.Enumerados.ModoGrade;
import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.faces.bean.ManagedBean;
import javax.faces.view.ViewScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.persistence.EntityManager;
import javax.servlet.http.HttpServletRequest;

/**
 * Modelo para as classes que apresentam dados em lista
 *
 * @author Rodrigo
 * @param <tipo> Tipo da classe de persistencia
 * @param <tipoRepositorio> Tipo da classe de repositório
 */
@ManagedBean
@ViewScoped
public abstract class GradesAcessoDadosCRUDBean<tipo extends ModeloEntidade, tipoRepositorio extends ModeloRepositorio<tipo>> implements Serializable {

    public GradesAcessoDadosCRUDBean() {
        String nomeRepositorio = ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[1].getTypeName();
        try {
            try {
                repositorio = (tipoRepositorio) Class.forName(nomeRepositorio).newInstance();
                repositorio.setGerenciador(this.getEntityManager());
            } catch (InstantiationException ex) {
                Logger.getLogger(GradesAcessoDadosCRUDBean.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(GradesAcessoDadosCRUDBean.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GradesAcessoDadosCRUDBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Contém o objeto do repositório para a manutenção dos dados
     */
    private tipoRepositorio repositorio;

    /**
     * Mantém o objeto que será incluído
     */
    private tipo novo;

    /**
     * Retorna o objeto que será incluído
     *
     * @return Objeto a ser incluído
     */
    public tipo getNovo() {
        return this.novo;
    }

    /**
     * Retorna o título para a aba conforme modo da grade
     *
     * @return Título para a aba
     */
    public String getTituloAba() {
        String tituloAba = "";

        switch (getModo()) {
            case ALTERACAO:
                tituloAba = "Alterando Registro";
                break;
            case INCLUSAO:
                tituloAba = "Novo Registro";
                break;
            case LISTAGEM:
                tituloAba = "Consulta";
                break;
        }

        return tituloAba;
    }

    /**
     * Defini o objeto que será incluído
     *
     * @param novoObjeto Objeto a ser incluído
     */
    public void setNovo(tipo novoObjeto) {
        this.novo = novoObjeto;
    }

    /**
     * Retorna o modo de inclusão
     *
     * @return True indica que o modo de inclusão está ativo, false indica que
     * está inativo
     */
    public boolean getModoInclusao() {
        return getModo() == ModoGrade.INCLUSAO;
    }

    /**
     * Retorna o modo de alteração
     *
     * @return true indica que a grade está em modo de alteração, false indica
     * que não está em modo de alteração
     */
    public boolean getModoAlteracao() {
        return getModo() == ModoGrade.ALTERACAO;
    }

    /**
     * Retorna informando se o modo atual da grade está em listagem
     *
     * @return true indica que o modo atual é de listagem, false indica que não
     * é modo de listagem
     */
    public boolean getModoListagem() {
        return getModo() == ModoGrade.LISTAGEM;
    }

    /**
     * Defini o modo de inclusão
     *
     * @param incluir True para ativar o modo, false desativa o modo
     */
    public void setModoInclusao(boolean incluir) {
        boolean erro = true;
        if (incluir) {
            try {
                String nomeClasseCRUD = ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0].getTypeName();
                setNovo((tipo) Class.forName(nomeClasseCRUD).newInstance());
                erro = false;
            } catch (IllegalArgumentException ex) {
                Logger.getLogger(GradesAcessoDadosCRUDBean.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(GradesAcessoDadosCRUDBean.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            erro = false;
            setNovo(null);

        }

        if (!erro) {
            if (incluir) {
                setModo(ModoGrade.INCLUSAO);
            } else {
                setModo(ModoGrade.LISTAGEM);
            }
        }
    }

    /**
     * Contém o modo atual da grade
     */
    private ModoGrade modo = ModoGrade.LISTAGEM;

    /**
     * Defini o modo de funcionamento da grade
     *
     * @param novoModo novo modo para agrade
     */
    public void setModo(ModoGrade novoModo) {
        this.modo = novoModo;
    }

    /**
     * Retorna o modo de funcionamento da grade
     *
     * @return modo de funcionamento
     */
    public ModoGrade getModo() {
        return this.modo;
    }

    /**
     * Mantém os registros que foram selecionados
     */
    private List<tipo> selecionados;

    /**
     * Retorna a lista dos objetos selecionados
     *
     * @return
     */
    public List<tipo> getSelecionados() {
        return selecionados;
    }

    /**
     * Defini uma nova lista de objetos selecionados
     *
     * @param novasSelecoes
     */
    public void setSelecionados(List<tipo> novasSelecoes) {
        this.selecionados = novasSelecoes;
    }

    /**
     * Método que retorna todos os dados de uma entidade conforme tipo
     *
     * @return Lista dos dados conforme tipo
     */
    public List<tipo> getDados() {
        repositorio.setGerenciador(this.getEntityManager());
        return repositorio.buscaTodos();
    }
    
    /**
     * Retorna 1 registro conforme a chave primária
     * @param chavePrimaria códigos que fazerm parte da chave primária
     * @return registro correspondente a chave primária
     */
    public tipo getDado(Long[] chavePrimaria){
        repositorio.setGerenciador(this.getEntityManager());
        return repositorio.buscarRegistro(chavePrimaria);
    }

    /**
     * Retorna o gerenciador de entidade
     *
     * @return Gerenciador de entidade
     */
    protected EntityManager getEntityManager() {
        FacesContext fc = FacesContext.getCurrentInstance();
        ExternalContext ec = fc.getExternalContext();
        HttpServletRequest request = (HttpServletRequest) ec.getRequest();
        EntityManager manager = (EntityManager) request.getAttribute("EntityManager");

        return manager;
    }

    /**
     * Executa processo para apagar as entidades selecionadas
     */
    public void apagaSelecionados() {
        if (getSelecionados() != null && getSelecionados().size() > 0) {
            getSelecionados().stream().forEach((entidadeAtual) -> {
                getEntityManager().remove(entidadeAtual);
            });
            getSelecionados().clear();
        }
    }

    /**
     * Inicialisa o modo de inclusão
     */
    public void iniciarInclusao() {
        setModoInclusao(true);
    }

    /**
     * Executa processo de cancelamento da inclusão
     */
    public void cancelarInclusao() {
        setModoInclusao(false);
    }

    /**
     * Executa processo para gravar as alterações no banco de dados
     */
    public void gravar() {
        repositorio.setGerenciador(this.getEntityManager());
        switch (getModo()) {

            case INCLUSAO:
                repositorio.incluir(getNovo());
                setModoInclusao(false);
                break;
            case ALTERACAO:

                repositorio.atualizar(getNovo());
                setModo(ModoGrade.LISTAGEM);
        }
    }

    public void alterarRegistro() {
        if (getSelecionados().size() > 0) {
            setNovo(repositorio.buscarRegistro(getSelecionados().get(0).getChavePrimaria()));
            setModo(ModoGrade.ALTERACAO);
        }
    }
}
